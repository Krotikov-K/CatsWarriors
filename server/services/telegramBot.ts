import TelegramBot from "node-telegram-bot-api";
import { storage } from "../storage";
import { GameEngine } from "./gameEngine";

export class TelegramBotService {
  private bot: TelegramBot | null = null;
  private isInitialized = false;

  constructor() {
    this.initializeBot();
  }

  private initializeBot() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.warn("TELEGRAM_BOT_TOKEN not provided, Telegram bot disabled");
      return;
    }

    try {
      this.bot = new TelegramBot(token, { polling: true });
      this.setupCommands();
      this.isInitialized = true;
      console.log("Telegram bot initialized successfully");
    } catch (error) {
      console.error("Failed to initialize Telegram bot:", error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    // Start command
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) return;

      // Check if user already exists
      const existingUser = await storage.getUserByTelegramId(telegramId);
      
      if (existingUser) {
        await this.bot?.sendMessage(chatId, 
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ Cats War, ${existingUser.username}!\n\n` +
          "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–µ. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≥—Ä—ã."
        );
      } else {
        await this.bot?.sendMessage(chatId,
          "üê± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cats War!\n\n" +
          "–≠—Ç–æ –ú–ú–û –†–ü–ì –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π '–ö–æ—Ç—ã –í–æ–∏—Ç–µ–ª–∏'.\n\n" +
          "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:\n" +
          "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n" +
          "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n" +
          "3. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞-–≤–æ–∏—Ç–µ–ª—è\n\n" +
          "–ö–æ–º–∞–Ω–¥—ã:\n" +
          "/help - –ø–æ–º–æ—â—å\n" +
          "/link <username> - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n" +
          "/status - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n" +
          "/location - —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è"
        );
      }
    });

    // Help command
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(chatId,
        "üéÆ –ö–æ–º–∞–Ω–¥—ã Cats War:\n\n" +
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
        "/link <username> - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä—ã\n" +
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n" +
        "/location - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏\n" +
        "/move <location> - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–æ–∫–∞—Ü–∏—é\n" +
        "/combat - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –±–æ–µ\n" +
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
        "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞!"
      );
    });

    // Link account command
    this.bot.onText(/\/link (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      const username = match?.[1];

      if (!telegramId || !username) {
        await this.bot?.sendMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã");
        return;
      }

      try {
        const user = await storage.getUserByUsername(username);
        if (!user) {
          await this.bot?.sendMessage(chatId, 
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –∏–≥—Ä—ã."
          );
          return;
        }

        if (user.telegramId) {
          await this.bot?.sendMessage(chatId, 
            "–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É."
          );
          return;
        }

        // Link the account
        await storage.updateUser(user.id, { telegramId });
        await this.bot?.sendMessage(chatId,
          `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
          `–ò–≥—Ä–æ–∫: ${username}\n` +
          "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö."
        );
      } catch (error) {
        console.error("Error linking account:", error);
        await this.bot?.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞");
      }
    });

    // Status command
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      try {
        const user = await storage.getUserByTelegramId(telegramId);
        if (!user) {
          await this.bot?.sendMessage(chatId, 
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
          );
          return;
        }

        const characters = await storage.getCharactersByUserId(user.id);
        if (characters.length === 0) {
          await this.bot?.sendMessage(chatId,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏–≥—Ä—ã."
          );
          return;
        }

        const character = characters[0]; // Use first character
        const location = await storage.getLocation(character.currentLocationId);
        const stats = GameEngine.calculateDerivedStats(character);

        await this.bot?.sendMessage(chatId,
          `üê± ${character.name}\n` +
          `üè† –ü–ª–µ–º—è: ${this.getClanName(character.clan)}\n` +
          `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${character.level}\n` +
          `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${character.currentHp}/${character.maxHp}\n` +
          `üìç –õ–æ–∫–∞—Ü–∏—è: ${location?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
          `üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n` +
          `üí™ –°–∏–ª–∞: ${character.strength}\n` +
          `üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: ${character.agility}\n` +
          `üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: ${character.intelligence}\n` +
          `üõ°Ô∏è –°—Ç–æ–π–∫–æ—Å—Ç—å: ${character.endurance}\n\n` +
          `‚öîÔ∏è –£—Ä–æ–Ω: ${stats.damage.min}-${stats.damage.max}\n` +
          `üèÉ –£–≤–æ—Ä–æ—Ç: ${stats.dodgeChance.toFixed(1)}%\n` +
          `üõ°Ô∏è –ë–ª–æ–∫: ${stats.blockChance.toFixed(1)}%`
        );
      } catch (error) {
        console.error("Error getting status:", error);
        await this.bot?.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }
    });

    console.log("Telegram bot commands set up");
  }

  async sendNotification(telegramId: string, message: string): Promise<void> {
    if (!this.bot || !this.isInitialized) return;

    try {
      await this.bot.sendMessage(telegramId, message);
    } catch (error) {
      console.error("Error sending Telegram notification:", error);
    }
  }

  async notifyCombatStart(participants: number[], locationName: string): Promise<void> {
    for (const characterId of participants) {
      const character = await storage.getCharacter(characterId);
      if (!character) continue;

      const user = await storage.getUser(character.userId);
      if (!user?.telegramId) continue;

      await this.sendNotification(
        user.telegramId,
        `‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞–ª—Å—è!\n\n` +
        `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ ${character.name} –≤—Å—Ç—É–ø–∏–ª –≤ –±–æ–π –≤ –ª–æ–∫–∞—Ü–∏–∏ "${locationName}".\n\n` +
        `–û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –±–æ–µ–º!`
      );
    }
  }

  async notifyCombatEnd(characterId: number, victory: boolean): Promise<void> {
    const character = await storage.getCharacter(characterId);
    if (!character) return;

    const user = await storage.getUser(character.userId);
    if (!user?.telegramId) return;

    const message = victory 
      ? `üèÜ –ü–æ–±–µ–¥–∞!\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ ${character.name} –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –≤ –±–æ—é!`
      : `üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ ${character.name} –ø–æ—Ç–µ—Ä–ø–µ–ª –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—é.`;

    await this.sendNotification(user.telegramId, message);
  }

  private getClanName(clan: string): string {
    const names: Record<string, string> = {
      thunder: "–ì—Ä–æ–∑–æ–≤–æ–µ –ü–ª–µ–º—è",
      shadow: "–¢–µ–Ω–µ–≤–æ–µ –ü–ª–µ–º—è", 
      wind: "–í–µ—Ç—Ä—è–Ω–æ–µ –ü–ª–µ–º—è",
      river: "–†–µ—á–Ω–æ–µ –ü–ª–µ–º—è"
    };
    return names[clan] || clan;
  }

  isEnabled(): boolean {
    return this.isInitialized && this.bot !== null;
  }
}

export const telegramBot = new TelegramBotService();
