import TelegramBot from "node-telegram-bot-api";

interface AdminSession {
  userId: number;
  authenticated: boolean;
  timestamp: number;
}

class AdminBotService {
  private bot: TelegramBot | null = null;
  private adminSessions: Map<number, AdminSession> = new Map();
  private readonly ADMIN_PASSWORD = "3138";
  private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes

  constructor() {
    this.initializeBot();
  }

  private initializeBot() {
    const adminToken = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
    if (!adminToken) {
      console.log("Admin bot token not provided, admin bot disabled");
      return;
    }

    try {
      this.bot = new TelegramBot(adminToken, { polling: true });
      this.setupCommands();
      this.setupMessageHandlers();
      console.log("Admin bot initialized successfully");
    } catch (error) {
      console.error("Failed to initialize admin bot:", error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    this.bot.setMyCommands([
      { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é" },
      { command: "admin", description: "–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" },
      { command: "logout", description: "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏" },
      { command: "help", description: "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" }
    ]);
  }

  private setupMessageHandlers() {
    if (!this.bot) return;

    this.bot.on("message", (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      const text = msg.text;

      if (!userId || !text) return;

      console.log(`Admin bot message from ${userId}: ${text}`);

      if (text.startsWith("/start")) {
        this.handleStart(chatId, userId);
      } else if (text.startsWith("/admin")) {
        this.handleAdminCommand(chatId, userId);
      } else if (text.startsWith("/logout")) {
        this.handleLogout(chatId, userId);
      } else if (text.startsWith("/help")) {
        this.handleHelp(chatId, userId);
      } else if (text === this.ADMIN_PASSWORD) {
        this.handlePasswordAuth(chatId, userId);
      } else {
        this.handleUnknownCommand(chatId, userId);
      }
    });

    this.bot.on("polling_error", (error) => {
      console.error("Admin bot polling error:", error);
    });
  }

  private async handleStart(chatId: number, userId: number) {
    if (!this.bot) return;

    const welcomeMessage = `üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Cats War!

–≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å  
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å`;

    await this.bot.sendMessage(chatId, welcomeMessage);
  }

  private async handleAdminCommand(chatId: number, userId: number) {
    if (!this.bot) return;

    const session = this.adminSessions.get(userId);
    const now = Date.now();

    // Check if user is already authenticated and session is valid
    if (session && session.authenticated && (now - session.timestamp) < this.SESSION_TIMEOUT) {
      await this.sendAdminPanel(chatId, userId);
      return;
    }

    // Request password
    await this.bot.sendMessage(
      chatId,
      "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
    );
  }

  private async handlePasswordAuth(chatId: number, userId: number) {
    if (!this.bot) return;

    // Create authenticated session
    this.adminSessions.set(userId, {
      userId,
      authenticated: true,
      timestamp: Date.now()
    });

    await this.bot.sendMessage(
      chatId,
      "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å..."
    );

    await this.sendAdminPanel(chatId, userId);
  }

  private async sendAdminPanel(chatId: number, userId: number) {
    if (!this.bot) return;

    // Update session timestamp
    const session = this.adminSessions.get(userId);
    if (session) {
      session.timestamp = Date.now();
    }

    const adminUrl = `${process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}` : 'http://localhost:5000'}/admin-panel`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üõ†Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            web_app: { url: adminUrl }
          }
        ],
        [
          {
            text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏",
            web_app: { url: `${adminUrl}?tab=characters` }
          }
        ],
        [
          {
            text: "üó∫Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏", 
            web_app: { url: `${adminUrl}?tab=locations` }
          }
        ],
        [
          {
            text: "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NPC",
            web_app: { url: `${adminUrl}?tab=npcs` }
          }
        ],
        [
          {
            text: "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            web_app: { url: `${adminUrl}?tab=users` }
          }
        ]
      ]
    };

    await this.bot.sendMessage(
      chatId,
      `üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Cats War

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:

üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
üó∫Ô∏è –õ–æ–∫–∞—Ü–∏–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ –∑–æ–Ω–∞–º–∏  
ü§ñ NPC - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`,
      { reply_markup: keyboard }
    );
  }

  private async handleLogout(chatId: number, userId: number) {
    if (!this.bot) return;

    this.adminSessions.delete(userId);
    await this.bot.sendMessage(
      chatId,
      "üîì –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin"
    );
  }

  private async handleHelp(chatId: number, userId: number) {
    if (!this.bot) return;

    const helpMessage = `üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–±–æ—Ç—É Cats War

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å)
/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è

üõ†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å—Ç–∞—Ç—ã, —É—Ä–æ–≤–µ–Ω—å, –∑–¥–æ—Ä–æ–≤—å–µ)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NPC (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ä–µ—Å–ø–∞–≤–Ω)
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚ö†Ô∏è –í–∞–∂–Ω–æ: –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`;

    await this.bot.sendMessage(chatId, helpMessage);
  }

  private async handleUnknownCommand(chatId: number, userId: number) {
    if (!this.bot) return;

    await this.bot.sendMessage(
      chatId,
      "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    );
  }

  // Check if user has valid admin session
  public isAuthenticated(userId: number): boolean {
    const session = this.adminSessions.get(userId);
    if (!session || !session.authenticated) return false;

    const now = Date.now();
    if ((now - session.timestamp) > this.SESSION_TIMEOUT) {
      this.adminSessions.delete(userId);
      return false;
    }

    return true;
  }

  // Clean up expired sessions periodically
  public cleanupSessions() {
    const now = Date.now();
    for (const [userId, session] of this.adminSessions.entries()) {
      if ((now - session.timestamp) > this.SESSION_TIMEOUT) {
        this.adminSessions.delete(userId);
        console.log(`Cleaned up expired admin session for user ${userId}`);
      }
    }
  }

  public async sendNotification(message: string) {
    if (!this.bot) return;

    // Send notifications to all authenticated admins
    for (const [userId, session] of this.adminSessions.entries()) {
      if (this.isAuthenticated(userId)) {
        try {
          await this.bot.sendMessage(userId, `üîî ${message}`);
        } catch (error) {
          console.error(`Failed to send notification to admin ${userId}:`, error);
        }
      }
    }
  }
}

export const adminBot = new AdminBotService();

// Clean up expired sessions every 10 minutes
setInterval(() => {
  adminBot.cleanupSessions();
}, 10 * 60 * 1000);