import { useState } from "react";
import { useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Slider } from "@/components/ui/slider";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { CLANS } from "@shared/schema";
import { useTelegramWebApp } from "@/hooks/useTelegramWebApp";
import { useUser } from "@/hooks/useUser";

const characterSchema = z.object({
  name: z.string().min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞").max(20, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤"),
  clan: z.enum(["thunder", "shadow", "wind", "river"]),
  gender: z.enum(["male", "female"]),
  strength: z.number().min(10).max(20),
  agility: z.number().min(10).max(20),
  intelligence: z.number().min(10).max(20),
  endurance: z.number().min(10).max(20),
});

type CharacterFormData = z.infer<typeof characterSchema>;

export default function CharacterCreation() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const { hapticFeedback } = useTelegramWebApp();
  const { user } = useUser();
  const [availablePoints, setAvailablePoints] = useState(10);

  const form = useForm<CharacterFormData>({
    resolver: zodResolver(characterSchema),
    defaultValues: {
      name: "",
      clan: "thunder",
      gender: "male",
      strength: 10,
      agility: 10,
      intelligence: 10,
      endurance: 10,
    },
  });

  const createCharacterMutation = useMutation({
    mutationFn: async (data: CharacterFormData) => {
      const response = await apiRequest("POST", "/api/characters", {
        ...data,
        userId: user?.id || 1,
      });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!",
        description: "–í–∞—à –∫–æ—Ç-–≤–æ–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.",
      });
      // Clear all cache and force refetch
      queryClient.clear();
      // Navigate immediately
      navigate("/");
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        variant: "destructive",
      });
    },
  });

  const watchedStats = form.watch(["strength", "agility", "intelligence", "endurance"]);
  const totalStatsUsed = watchedStats.reduce((sum, stat) => sum + stat, 0) - 40; // Subtract base points (10 each)
  const remainingPoints = 10 - totalStatsUsed;

  const updateAvailablePoints = () => {
    setAvailablePoints(remainingPoints);
  };

  const onSubmit = (data: CharacterFormData) => {
    if (totalStatsUsed > 10) {
      hapticFeedback('heavy');
      toast({
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—á–∫–æ–≤",
        description: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ 10 –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.",
        variant: "destructive",
      });
      return;
    }
    hapticFeedback('medium');
    createCharacterMutation.mutate(data);
  };

  const handleStatChange = (field: keyof CharacterFormData, value: number[]) => {
    const newValue = value[0];
    const currentValues = form.getValues();
    const otherStats = Object.entries(currentValues)
      .filter(([key]) => key !== field && ["strength", "agility", "intelligence", "endurance"].includes(key))
      .reduce((sum, [, val]) => sum + (val as number), 0);
    
    if (otherStats + newValue - 40 <= 10) {
      form.setValue(field as any, newValue);
      updateAvailablePoints();
    }
  };

  const getClanDescription = (clan: string) => {
    const descriptions = {
      thunder: "–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –∏ —Å–º–µ–ª—ã–µ –∫–æ—Ç—ã, –∂–∏–≤—É—â–∏–µ –≤ –ª–µ—Å—É. –û—Ç–ª–∏—á–Ω—ã–µ –æ—Ö–æ—Ç–Ω–∏–∫–∏ –∏ –≤–æ–∏–Ω—ã.",
      shadow: "–•–∏—Ç—Ä—ã–µ –∏ —Å–∫—Ä—ã—Ç–Ω—ã–µ –∫–æ—Ç—ã –±–æ–ª–æ—Ç. –ú–∞—Å—Ç–µ—Ä–∞ –∑–∞—Å–∞–¥ –∏ –Ω–æ—á–Ω—ã—Ö –∞—Ç–∞–∫.",
      wind: "–ë—ã—Å—Ç—Ä—ã–µ –∫–æ—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É—Å—Ç–æ—à–µ–π. –ù–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω—ã–µ –±–µ–≥—É–Ω—ã –∏ —Å–ª–µ–¥–æ–ø—ã—Ç—ã.",
      river: "–£–º–µ–ª—ã–µ –ø–ª–æ–≤—Ü—ã –∏ —Ä—ã–±–æ–ª–æ–≤—ã. –ú—É–¥—Ä—ã–µ –∏ —Å–ø–æ–∫–æ–π–Ω—ã–µ –∫–æ—Ç—ã —É –≤–æ–¥—ã.",
    };
    return descriptions[clan as keyof typeof descriptions] || "";
  };

  const getClanEmoji = (clan: string) => {
    const emojis = {
      thunder: "‚ö°",
      shadow: "üåô",
      wind: "üí®",
      river: "üåä",
    };
    return emojis[clan as keyof typeof emojis] || "üê±";
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4 safe-area-inset">
      <Card className="w-full max-w-md bg-card border-border">
        <CardHeader className="text-center pb-4">
          <CardTitle className="text-2xl font-gaming text-foreground">
            üê± –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ç–∞-–≤–æ–∏—Ç–µ–ª—è
          </CardTitle>
          <p className="text-muted-foreground text-sm">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –º–∏—Ä–∞ –ö–æ—Ç–æ–≤ –í–æ–∏—Ç–µ–ª–µ–π</p>
        </CardHeader>
        
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Character Name */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-foreground">–ò–º—è –∫–æ—Ç–∞</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–≥–Ω–µ–∑–≤—ë–∑–¥, –°–µ—Ä–µ–±—Ä—è–Ω–∫–∞..."
                        className="bg-input border-border text-foreground"
                        {...field}
                        onFocus={() => hapticFeedback('light')}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Clan Selection */}
              <FormField
                control={form.control}
                name="clan"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-foreground">–ü–ª–µ–º—è</FormLabel>
                    <Select value={field.value} onValueChange={(value) => {
                      hapticFeedback('light');
                      field.onChange(value);
                    }}>
                      <FormControl>
                        <SelectTrigger className="bg-input border-border text-foreground">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–º—è" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-popover border-border">
                        {Object.entries(CLANS).map(([key, clan]) => (
                          <SelectItem key={key} value={key} className="text-popover-foreground">
                            <span className={`clan-${key} font-medium`}>{getClanEmoji(key)}</span> {clan.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <p className="text-xs text-muted-foreground mt-1">
                      {getClanDescription(field.value)}
                    </p>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Gender Selection */}
              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-foreground">–ü–æ–ª</FormLabel>
                    <Select value={field.value} onValueChange={(value) => {
                      hapticFeedback('light');
                      field.onChange(value);
                    }}>
                      <FormControl>
                        <SelectTrigger className="bg-input border-border text-foreground">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-popover border-border">
                        <SelectItem value="male" className="text-popover-foreground">
                          üê± –ö–æ—Ç
                        </SelectItem>
                        <SelectItem value="female" className="text-popover-foreground">
                          üêà –ö–æ—à–∫–∞
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Stats */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-gaming text-forest">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                  <div className="text-sm text-gray-400">
                    –û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤: <span className="font-stats text-white">{remainingPoints}</span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Strength */}
                  <FormField
                    control={form.control}
                    name="strength"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-gray-300">
                          <i className="fas fa-fist-raised text-red-400 mr-2"></i>
                          –°–∏–ª–∞: {field.value}
                        </FormLabel>
                        <FormControl>
                          <Slider
                            min={10}
                            max={20}
                            step={1}
                            value={[field.value]}
                            onValueChange={(value) => handleStatChange("strength", value)}
                            className="w-full"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Agility */}
                  <FormField
                    control={form.control}
                    name="agility"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-gray-300">
                          <i className="fas fa-running text-green-400 mr-2"></i>
                          –õ–æ–≤–∫–æ—Å—Ç—å: {field.value}
                        </FormLabel>
                        <FormControl>
                          <Slider
                            min={10}
                            max={20}
                            step={1}
                            value={[field.value]}
                            onValueChange={(value) => handleStatChange("agility", value)}
                            className="w-full"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Intelligence */}
                  <FormField
                    control={form.control}
                    name="intelligence"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-gray-300">
                          <i className="fas fa-brain text-blue-400 mr-2"></i>
                          –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {field.value}
                        </FormLabel>
                        <FormControl>
                          <Slider
                            min={10}
                            max={20}
                            step={1}
                            value={[field.value]}
                            onValueChange={(value) => handleStatChange("intelligence", value)}
                            className="w-full"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Endurance */}
                  <FormField
                    control={form.control}
                    name="endurance"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-gray-300">
                          <i className="fas fa-shield-alt text-yellow-400 mr-2"></i>
                          –°—Ç–æ–π–∫–æ—Å—Ç—å: {field.value}
                        </FormLabel>
                        <FormControl>
                          <Slider
                            min={10}
                            max={20}
                            step={1}
                            value={[field.value]}
                            onValueChange={(value) => handleStatChange("endurance", value)}
                            className="w-full"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Submit Button */}
              <Button
                type="submit"
                disabled={createCharacterMutation.isPending || remainingPoints < 0}
                className="w-full game-button-primary text-lg py-6"
              >
                {createCharacterMutation.isPending ? (
                  <>
                    <i className="fas fa-spinner fa-spin mr-2"></i>
                    –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...
                  </>
                ) : (
                  <>
                    <i className="fas fa-cat mr-2"></i>
                    –°–æ–∑–¥–∞—Ç—å –∫–æ—Ç–∞-–≤–æ–∏—Ç–µ–ª—è
                  </>
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
