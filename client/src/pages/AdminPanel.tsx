import { useState, useEffect } from "react";
import { navigate } from "wouter/use-browser-location";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Character, Location, NPC, User } from "@shared/schema";

export default function AdminPanel() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Check admin authentication
  useEffect(() => {
    const isAuthenticated = localStorage.getItem("adminAuthenticated");
    const timestamp = localStorage.getItem("adminTimestamp");
    
    if (!isAuthenticated || !timestamp) {
      navigate("/admin-login");
      return;
    }

    // Check if session expired (30 minutes)
    const sessionAge = Date.now() - parseInt(timestamp);
    if (sessionAge > 30 * 60 * 1000) {
      localStorage.removeItem("adminAuthenticated");
      localStorage.removeItem("adminTimestamp");
      navigate("/admin-login");
      return;
    }
  }, []);
  
  // Fetch all data
  const { data: characters = [] } = useQuery<Character[]>({
    queryKey: ['/api/admin/characters'],
  });
  
  const { data: users = [] } = useQuery<User[]>({
    queryKey: ['/api/admin/users'],
  });
  
  const { data: locations = [] } = useQuery<Location[]>({
    queryKey: ['/api/locations'],
  });
  
  const { data: npcs = [] } = useQuery<NPC[]>({
    queryKey: ['/api/npcs'],
  });

  // Character management
  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null);
  const [characterForm, setCharacterForm] = useState({
    name: '',
    clan: 'thunder',
    level: 1,
    experience: 0,
    strength: 10,
    agility: 10,
    intelligence: 10,
    endurance: 10,
    currentHp: 100,
    maxHp: 100,
    currentLocationId: 1
  });

  // Location management
  const [editingLocation, setEditingLocation] = useState<Location | null>(null);
  const [locationForm, setLocationForm] = useState({
    name: '',
    description: '',
    type: 'neutral',
    clan: null as string | null,
    maxPlayers: 50,
    dangerLevel: 1,
    x: 50,
    y: 50,
    emoji: 'üåø',
    connectedTo: [] as number[]
  });

  // NPC management
  const [editingNPC, setEditingNPC] = useState<NPC | null>(null);
  const [npcForm, setNPCForm] = useState({
    name: '',
    type: 'enemy',
    level: 1,
    maxHp: 30,
    strength: 8,
    agility: 8,
    intelligence: 8,
    endurance: 8,
    description: '',
    emoji: 'üê≠',
    experienceReward: 25,
    spawnsInLocation: [] as number[],
    respawnTime: 120
  });

  // Update character mutation
  const updateCharacterMutation = useMutation({
    mutationFn: async (data: { id: number; updates: Partial<Character> }) => {
      const response = await apiRequest("PATCH", `/api/admin/characters/${data.id}`, data.updates);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/characters'] });
      toast({ title: "–ü–µ—Ä—Å–æ–Ω–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω", description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" });
      setEditingCharacter(null);
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // Update location mutation
  const updateLocationMutation = useMutation({
    mutationFn: async (data: { id: number; updates: Partial<Location> }) => {
      const response = await apiRequest("PATCH", `/api/admin/locations/${data.id}`, data.updates);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/locations'] });
      toast({ title: "–õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" });
      setEditingLocation(null);
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // Update NPC mutation
  const updateNPCMutation = useMutation({
    mutationFn: async (data: { id: number; updates: Partial<NPC> }) => {
      const response = await apiRequest("PATCH", `/api/admin/npcs/${data.id}`, data.updates);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/npcs'] });
      toast({ title: "NPC –æ–±–Ω–æ–≤–ª–µ–Ω", description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" });
      setEditingNPC(null);
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // Respawn NPC mutation
  const respawnNPCMutation = useMutation({
    mutationFn: async (npcId: number) => {
      const response = await apiRequest("POST", `/api/admin/npcs/${npcId}/respawn`);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/npcs'] });
      toast({ title: "NPC –≤–æ–∑—Ä–æ–∂–¥–µ–Ω", description: "NPC –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–ª–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º" });
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // Handle character edit
  const handleEditCharacter = (character: Character) => {
    setEditingCharacter(character);
    setCharacterForm({
      name: character.name,
      clan: character.clan,
      level: character.level,
      experience: character.experience,
      strength: character.strength,
      agility: character.agility,
      intelligence: character.intelligence,
      endurance: character.endurance,
      currentHp: character.currentHp,
      maxHp: character.maxHp,
      currentLocationId: character.currentLocationId
    });
  };

  // Handle location edit
  const handleEditLocation = (location: Location) => {
    setEditingLocation(location);
    setLocationForm({
      name: location.name,
      description: location.description || '',
      type: location.type,
      clan: location.clan,
      maxPlayers: location.maxPlayers || 50,
      dangerLevel: location.dangerLevel,
      x: location.x,
      y: location.y,
      emoji: location.emoji,
      connectedTo: location.connectedTo || []
    });
  };

  // Handle NPC edit
  const handleEditNPC = (npc: NPC) => {
    setEditingNPC(npc);
    setNPCForm({
      name: npc.name,
      type: npc.type,
      level: npc.level,
      maxHp: npc.maxHp,
      strength: npc.strength,
      agility: npc.agility,
      intelligence: npc.intelligence,
      endurance: npc.endurance,
      description: npc.description,
      emoji: npc.emoji,
      experienceReward: npc.experienceReward,
      spawnsInLocation: npc.spawnsInLocation,
      respawnTime: npc.respawnTime
    });
  };

  const handleLogout = () => {
    localStorage.removeItem("adminAuthenticated");
    localStorage.removeItem("adminTimestamp");
    navigate("/");
  };

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      <div className="mb-6 flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold mb-2">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
          <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º –º–∏—Ä–æ–º Cats War</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="secondary">–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º</Badge>
          <Button variant="outline" size="sm" onClick={handleLogout}>
            –í—ã–π—Ç–∏
          </Button>
        </div>
      </div>

      <Tabs defaultValue="characters" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="characters">–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</TabsTrigger>
          <TabsTrigger value="locations">–õ–æ–∫–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="npcs">NPC</TabsTrigger>
          <TabsTrigger value="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</TabsTrigger>
        </TabsList>

        {/* Characters Tab */}
        <TabsContent value="characters" className="space-y-4">
          <div className="grid gap-4">
            {characters.map((character) => (
              <Card key={character.id}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {character.name}
                        <Badge variant={character.clan === 'thunder' ? 'default' : 'secondary'}>
                          {character.clan === 'thunder' ? '–ì—Ä–æ–∑–æ–≤–æ–µ' : '–†–µ—á–Ω–æ–µ'} –ü–ª–µ–º—è
                        </Badge>
                      </CardTitle>
                      <CardDescription>
                        –£—Ä–æ–≤–µ–Ω—å {character.level} ‚Ä¢ {character.experience} –æ–ø—ã—Ç–∞
                      </CardDescription>
                    </div>
                    <Button onClick={() => handleEditCharacter(character)} size="sm">
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="font-medium">–ó–¥–æ—Ä–æ–≤—å–µ:</span> {character.currentHp}/{character.maxHp}
                    </div>
                    <div>
                      <span className="font-medium">–°–∏–ª–∞:</span> {character.strength}
                    </div>
                    <div>
                      <span className="font-medium">–õ–æ–≤–∫–æ—Å—Ç—å:</span> {character.agility}
                    </div>
                    <div>
                      <span className="font-medium">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:</span> {character.intelligence}
                    </div>
                    <div>
                      <span className="font-medium">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:</span> {character.endurance}
                    </div>
                    <div>
                      <span className="font-medium">–õ–æ–∫–∞—Ü–∏—è:</span> {character.currentLocationId}
                    </div>
                    <div>
                      <span className="font-medium">–û–Ω–ª–∞–π–Ω:</span> {character.isOnline ? '–î–∞' : '–ù–µ—Ç'}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Character Edit Modal */}
          {editingCharacter && (
            <Card className="fixed inset-4 z-50 bg-background border shadow-lg overflow-auto">
              <CardHeader>
                <CardTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {editingCharacter.name}</CardTitle>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => setEditingCharacter(null)}
                  className="absolute top-4 right-4"
                >
                  ‚úï
                </Button>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">–ò–º—è</Label>
                    <Input
                      id="name"
                      value={characterForm.name}
                      onChange={(e) => setCharacterForm({...characterForm, name: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="clan">–ü–ª–µ–º—è</Label>
                    <Select value={characterForm.clan} onValueChange={(value) => setCharacterForm({...characterForm, clan: value as any})}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="thunder">–ì—Ä–æ–∑–æ–≤–æ–µ –ü–ª–µ–º—è</SelectItem>
                        <SelectItem value="river">–†–µ—á–Ω–æ–µ –ü–ª–µ–º—è</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="level">–£—Ä–æ–≤–µ–Ω—å</Label>
                    <Input
                      id="level"
                      type="number"
                      value={characterForm.level}
                      onChange={(e) => setCharacterForm({...characterForm, level: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="experience">–û–ø—ã—Ç</Label>
                    <Input
                      id="experience"
                      type="number"
                      value={characterForm.experience}
                      onChange={(e) => setCharacterForm({...characterForm, experience: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="strength">–°–∏–ª–∞</Label>
                    <Input
                      id="strength"
                      type="number"
                      value={characterForm.strength}
                      onChange={(e) => setCharacterForm({...characterForm, strength: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="agility">–õ–æ–≤–∫–æ—Å—Ç—å</Label>
                    <Input
                      id="agility"
                      type="number"
                      value={characterForm.agility}
                      onChange={(e) => setCharacterForm({...characterForm, agility: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="intelligence">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç</Label>
                    <Input
                      id="intelligence"
                      type="number"
                      value={characterForm.intelligence}
                      onChange={(e) => setCharacterForm({...characterForm, intelligence: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="endurance">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å</Label>
                    <Input
                      id="endurance"
                      type="number"
                      value={characterForm.endurance}
                      onChange={(e) => setCharacterForm({...characterForm, endurance: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="currentHp">–¢–µ–∫—É—â–µ–µ HP</Label>
                    <Input
                      id="currentHp"
                      type="number"
                      value={characterForm.currentHp}
                      onChange={(e) => setCharacterForm({...characterForm, currentHp: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="maxHp">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP</Label>
                    <Input
                      id="maxHp"
                      type="number"
                      value={characterForm.maxHp}
                      onChange={(e) => setCharacterForm({...characterForm, maxHp: parseInt(e.target.value)})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="currentLocationId">ID –ª–æ–∫–∞—Ü–∏–∏</Label>
                    <Input
                      id="currentLocationId"
                      type="number"
                      value={characterForm.currentLocationId}
                      onChange={(e) => setCharacterForm({...characterForm, currentLocationId: parseInt(e.target.value)})}
                    />
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={() => updateCharacterMutation.mutate({
                      id: editingCharacter.id,
                      updates: characterForm
                    })}
                    disabled={updateCharacterMutation.isPending}
                  >
                    {updateCharacterMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                  <Button variant="outline" onClick={() => setEditingCharacter(null)}>
                    –û—Ç–º–µ–Ω–∏—Ç—å
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Locations Tab */}
        <TabsContent value="locations" className="space-y-4">
          <div className="grid gap-4">
            {locations.map((location) => (
              <Card key={location.id}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {location.emoji} {location.name}
                        <Badge variant={location.type === 'camp' ? 'default' : 'secondary'}>
                          {location.type}
                        </Badge>
                      </CardTitle>
                      <CardDescription>
                        –û–ø–∞—Å–Ω–æ—Å—Ç—å: {location.dangerLevel} ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: ({location.x}, {location.y})
                      </CardDescription>
                    </div>
                    <Button onClick={() => handleEditLocation(location)} size="sm">
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium">–¢–∏–ø:</span> {location.type}
                    </div>
                    <div>
                      <span className="font-medium">–ü–ª–µ–º—è:</span> {location.clan || '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}
                    </div>
                    <div>
                      <span className="font-medium">–ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤:</span> {location.maxPlayers || 50}
                    </div>
                    <div>
                      <span className="font-medium">–°–≤—è–∑–∏:</span> {location.connectedTo?.join(', ') || '–ù–µ—Ç'}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* NPCs Tab */}
        <TabsContent value="npcs" className="space-y-4">
          <div className="grid gap-4">
            {npcs.map((npc) => (
              <Card key={npc.id}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {npc.emoji} {npc.name}
                        <Badge variant={npc.type === 'boss' ? 'destructive' : 'secondary'}>
                          {npc.type}
                        </Badge>
                        {npc.isDead && (
                          <Badge variant="outline">–ú–µ—Ä—Ç–≤</Badge>
                        )}
                      </CardTitle>
                      <CardDescription>
                        –£—Ä–æ–≤–µ–Ω—å {npc.level} ‚Ä¢ {npc.currentHp}/{npc.maxHp} HP
                      </CardDescription>
                    </div>
                    <div className="flex gap-2">
                      {npc.isDead && (
                        <Button 
                          onClick={() => respawnNPCMutation.mutate(npc.id)}
                          disabled={respawnNPCMutation.isPending}
                          size="sm"
                          variant="outline"
                        >
                          –í–æ–∑—Ä–æ–¥–∏—Ç—å
                        </Button>
                      )}
                      <Button onClick={() => handleEditNPC(npc)} size="sm">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="font-medium">–°–∏–ª–∞:</span> {npc.strength}
                    </div>
                    <div>
                      <span className="font-medium">–õ–æ–≤–∫–æ—Å—Ç—å:</span> {npc.agility}
                    </div>
                    <div>
                      <span className="font-medium">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:</span> {npc.intelligence}
                    </div>
                    <div>
                      <span className="font-medium">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:</span> {npc.endurance}
                    </div>
                    <div>
                      <span className="font-medium">–ù–∞–≥—Ä–∞–¥–∞:</span> {npc.experienceReward} –æ–ø—ã—Ç–∞
                    </div>
                    <div>
                      <span className="font-medium">–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ:</span> {npc.respawnTime}—Å
                    </div>
                    <div>
                      <span className="font-medium">–õ–æ–∫–∞—Ü–∏–∏:</span> {npc.spawnsInLocation.join(', ')}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Users Tab */}
        <TabsContent value="users" className="space-y-4">
          <div className="grid gap-4">
            {users.map((user) => (
              <Card key={user.id}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {user.username}
                    {user.isAdmin && <Badge variant="destructive">–ê–¥–º–∏–Ω</Badge>}
                  </CardTitle>
                  <CardDescription>
                    ID: {user.id} ‚Ä¢ Telegram: {user.telegramId || '–ù–µ —Å–≤—è–∑–∞–Ω'}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-sm text-muted-foreground">
                    –°–æ–∑–¥–∞–Ω: {new Date(user.createdAt).toLocaleDateString()}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}